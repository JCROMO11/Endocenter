"""initial schema clean

Revision ID: 45946d541c40
Revises: 
Create Date: 2025-10-01 02:01:42.892365

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '45946d541c40'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_metrics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('model_name', sa.String(length=200), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=False),
    sa.Column('model_type', sa.String(length=50), nullable=False),
    sa.Column('accuracy', sa.Float(), nullable=True),
    sa.Column('precision', sa.Float(), nullable=True),
    sa.Column('recall', sa.Float(), nullable=True),
    sa.Column('f1_score', sa.Float(), nullable=True),
    sa.Column('retrieval_precision_at_k', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('retrieval_recall_at_k', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ndcg_at_k', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('avg_inference_time_ms', sa.Float(), nullable=True),
    sa.Column('avg_memory_usage_mb', sa.Float(), nullable=True),
    sa.Column('gpu_utilization_percent', sa.Float(), nullable=True),
    sa.Column('total_predictions', sa.Integer(), nullable=False),
    sa.Column('successful_predictions', sa.Integer(), nullable=False),
    sa.Column('failed_predictions', sa.Integer(), nullable=False),
    sa.Column('measurement_start', sa.DateTime(), nullable=False),
    sa.Column('measurement_end', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.CheckConstraint('failed_predictions >= 0', name='non_negative_failed_predictions'),
    sa.CheckConstraint('successful_predictions + failed_predictions <= total_predictions', name='valid_prediction_counts'),
    sa.CheckConstraint('successful_predictions >= 0', name='non_negative_successful_predictions'),
    sa.CheckConstraint('total_predictions >= 0', name='non_negative_total_predictions'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_model_metrics_name_version', 'model_metrics', ['model_name', 'model_version'], unique=False)
    op.create_index('idx_model_metrics_period', 'model_metrics', ['measurement_start', 'measurement_end'], unique=False)
    op.create_index('idx_model_metrics_type', 'model_metrics', ['model_type'], unique=False)
    op.create_index(op.f('ix_model_metrics_id'), 'model_metrics', ['id'], unique=False)
    op.create_table('system_metrics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cpu_percent', sa.Float(), nullable=True),
    sa.Column('memory_percent', sa.Float(), nullable=True),
    sa.Column('gpu_percent', sa.Float(), nullable=True),
    sa.Column('gpu_memory_percent', sa.Float(), nullable=True),
    sa.Column('disk_percent', sa.Float(), nullable=True),
    sa.Column('gpu_temperature', sa.Float(), nullable=True),
    sa.Column('gpu_power_usage', sa.Float(), nullable=True),
    sa.Column('cuda_version', sa.String(length=20), nullable=True),
    sa.Column('active_users', sa.Integer(), nullable=False),
    sa.Column('active_consultations', sa.Integer(), nullable=False),
    sa.Column('requests_per_minute', sa.Float(), nullable=True),
    sa.Column('avg_response_time_ms', sa.Float(), nullable=True),
    sa.Column('db_connections', sa.Integer(), nullable=True),
    sa.Column('db_query_time_ms', sa.Float(), nullable=True),
    sa.Column('error_rate_percent', sa.Float(), nullable=True),
    sa.Column('timeout_rate_percent', sa.Float(), nullable=True),
    sa.Column('recorded_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('active_consultations >= 0', name='non_negative_active_consultations'),
    sa.CheckConstraint('active_users >= 0', name='non_negative_active_users'),
    sa.CheckConstraint('cpu_percent IS NULL OR (cpu_percent >= 0 AND cpu_percent <= 100)', name='valid_cpu_percent'),
    sa.CheckConstraint('gpu_percent IS NULL OR (gpu_percent >= 0 AND gpu_percent <= 100)', name='valid_gpu_percent'),
    sa.CheckConstraint('memory_percent IS NULL OR (memory_percent >= 0 AND memory_percent <= 100)', name='valid_memory_percent'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_system_metrics_recorded', 'system_metrics', ['recorded_at'], unique=False)
    op.create_index(op.f('ix_system_metrics_id'), 'system_metrics', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('role', sa.Enum('PATIENT', 'DOCTOR', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('doctors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('medical_license_number', sa.String(length=100), nullable=False),
    sa.Column('license_state', sa.String(length=50), nullable=False),
    sa.Column('license_expiry_date', sa.Date(), nullable=False),
    sa.Column('years_of_experience', sa.Integer(), nullable=False),
    sa.Column('primary_specialty', sa.Enum('GENERAL_ENDOCRINOLOGY', 'DIABETES', 'THYROID', 'ADRENAL', 'REPRODUCTIVE_ENDOCRINOLOGY', 'PEDIATRIC_ENDOCRINOLOGY', 'BONE_METABOLISM', 'OBESITY', name='medicalspecialty'), nullable=False),
    sa.Column('secondary_specialties', sa.Text(), nullable=True),
    sa.Column('hospital_affiliation', sa.String(length=200), nullable=True),
    sa.Column('clinic_name', sa.String(length=200), nullable=True),
    sa.Column('clinic_address', sa.Text(), nullable=True),
    sa.Column('consultation_fee', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('session_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('biography', sa.Text(), nullable=True),
    sa.Column('education', sa.Text(), nullable=True),
    sa.Column('certifications', sa.Text(), nullable=True),
    sa.Column('is_accepting_patients', sa.Boolean(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_doctors_id'), 'doctors', ['id'], unique=False)
    op.create_index(op.f('ix_doctors_medical_license_number'), 'doctors', ['medical_license_number'], unique=True)
    op.create_table('medical_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=1000), nullable=False),
    sa.Column('file_size_bytes', sa.Integer(), nullable=False),
    sa.Column('file_hash', sa.String(length=64), nullable=False),
    sa.Column('document_type', sa.Enum('TEXTBOOK', 'RESEARCH_PAPER', 'CLINICAL_GUIDELINE', 'CASE_STUDY', 'DRUG_REFERENCE', 'PROTOCOL', 'OTHER', name='documenttype'), nullable=False),
    sa.Column('medical_specialty', sa.Enum('GENERAL_ENDOCRINOLOGY', 'DIABETES', 'THYROID', 'ADRENAL', 'REPRODUCTIVE_ENDOCRINOLOGY', 'PEDIATRIC_ENDOCRINOLOGY', 'BONE_METABOLISM', 'OBESITY', name='medicalspecialty'), nullable=True),
    sa.Column('diseases_covered', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('keywords', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('page_count', sa.Integer(), nullable=True),
    sa.Column('word_count', sa.Integer(), nullable=True),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('content_preview', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('UPLOADED', 'PROCESSING', 'CHUNKED', 'EMBEDDED', 'INDEXED', 'ERROR', name='documentstatus'), nullable=False),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('total_chunks', sa.Integer(), nullable=False),
    sa.Column('embedding_model_used', sa.String(length=200), nullable=True),
    sa.Column('embedding_dimension', sa.Integer(), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('relevance_score', sa.Float(), nullable=True),
    sa.Column('readability_score', sa.Float(), nullable=True),
    sa.Column('version', sa.String(length=20), nullable=False),
    sa.Column('uploaded_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('file_size_bytes > 0', name='positive_file_size'),
    sa.CheckConstraint('quality_score IS NULL OR (quality_score >= 0 AND quality_score <= 1)', name='valid_quality_score'),
    sa.CheckConstraint('total_chunks >= 0', name='non_negative_chunks'),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_medical_document_diseases', 'medical_documents', ['diseases_covered'], unique=False)
    op.create_index('idx_medical_document_specialty', 'medical_documents', ['medical_specialty'], unique=False)
    op.create_index('idx_medical_document_status', 'medical_documents', ['status'], unique=False)
    op.create_index('idx_medical_document_type', 'medical_documents', ['document_type'], unique=False)
    op.create_index(op.f('ix_medical_documents_file_hash'), 'medical_documents', ['file_hash'], unique=True)
    op.create_index(op.f('ix_medical_documents_id'), 'medical_documents', ['id'], unique=False)
    op.create_table('patients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('blood_type', sa.Enum('A_POSITIVE', 'A_NEGATIVE', 'B_POSITIVE', 'B_NEGATIVE', 'AB_POSITIVE', 'AB_NEGATIVE', 'O_POSITIVE', 'O_NEGATIVE', 'UNKNOWN', name='bloodtype'), nullable=True),
    sa.Column('height_cm', sa.Float(), nullable=True),
    sa.Column('weight_kg', sa.Float(), nullable=True),
    sa.Column('insurance_provider', sa.Enum('ANTHEM', 'BLUE_CROSS', 'AETNA', 'CIGNA', 'UNITED_HEALTH', 'MEDICARE', 'MEDICAID', 'PRIVATE_PAY', 'OTHER', name='insuranceprovider'), nullable=True),
    sa.Column('insurance_policy_number', sa.String(length=100), nullable=True),
    sa.Column('insurance_group_number', sa.String(length=100), nullable=True),
    sa.Column('medical_conditions', sa.Text(), nullable=True),
    sa.Column('family_history', sa.Text(), nullable=True),
    sa.Column('surgical_history', sa.Text(), nullable=True),
    sa.Column('smoking_status', sa.String(length=20), nullable=True),
    sa.Column('alcohol_consumption', sa.String(length=20), nullable=True),
    sa.Column('exercise_frequency', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('preferred_language', sa.String(length=10), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_patients_id'), 'patients', ['id'], unique=False)
    op.create_table('symptoms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=True),
    sa.Column('synonyms', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('subcategory', sa.String(length=100), nullable=True),
    sa.Column('body_system', sa.String(length=100), nullable=True),
    sa.Column('medical_specialty', sa.Enum('GENERAL_ENDOCRINOLOGY', 'DIABETES', 'THYROID', 'ADRENAL', 'REPRODUCTIVE_ENDOCRINOLOGY', 'PEDIATRIC_ENDOCRINOLOGY', 'BONE_METABOLISM', 'OBESITY', name='medicalspecialty'), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('clinical_significance', sa.Text(), nullable=True),
    sa.Column('common_causes', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('associated_conditions', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('can_be_mild', sa.Boolean(), nullable=False),
    sa.Column('can_be_severe', sa.Boolean(), nullable=False),
    sa.Column('urgency_level', sa.Integer(), nullable=False),
    sa.Column('reported_count', sa.Integer(), nullable=False),
    sa.Column('diagnosis_correlation', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.CheckConstraint('reported_count >= 0', name='non_negative_reported_count'),
    sa.CheckConstraint('urgency_level >= 1 AND urgency_level <= 5', name='valid_urgency_level'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('name')
    )
    op.create_index('idx_symptom_category', 'symptoms', ['category'], unique=False)
    op.create_index('idx_symptom_name', 'symptoms', ['name'], unique=False)
    op.create_index('idx_symptom_specialty', 'symptoms', ['medical_specialty'], unique=False)
    op.create_index('idx_symptom_urgency', 'symptoms', ['urgency_level'], unique=False)
    op.create_index(op.f('ix_symptoms_id'), 'symptoms', ['id'], unique=False)
    op.create_table('user_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHER', 'PREFER_NOT_TO_SAY', name='gender'), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('state', sa.String(length=100), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('emergency_contact_name', sa.String(length=200), nullable=True),
    sa.Column('emergency_contact_phone', sa.String(length=20), nullable=True),
    sa.Column('emergency_contact_relationship', sa.String(length=100), nullable=True),
    sa.Column('language_preference', sa.String(length=10), nullable=True),
    sa.Column('notification_preferences', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_user_profiles_id'), 'user_profiles', ['id'], unique=False)
    op.create_table('allergies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('allergen', sa.String(length=200), nullable=False),
    sa.Column('allergy_type', sa.String(length=50), nullable=False),
    sa.Column('severity', sa.String(length=20), nullable=False),
    sa.Column('reaction_symptoms', sa.Text(), nullable=True),
    sa.Column('first_occurrence', sa.Date(), nullable=True),
    sa.Column('last_occurrence', sa.Date(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_allergies_id'), 'allergies', ['id'], unique=False)
    op.create_index(op.f('ix_allergies_patient_id'), 'allergies', ['patient_id'], unique=False)
    op.create_table('appointments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=False),
    sa.Column('appointment_type', sa.Enum('FIRST_TIME', 'CONSULTATION', 'FOLLOW_UP', 'EMERGENCY', 'ROUTINE_CHECKUP', name='appointmenttype'), nullable=False),
    sa.Column('status', sa.Enum('REQUESTED', 'CONFIRMED', 'SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW', 'RESCHEDULED', name='appointmentstatus'), nullable=True),
    sa.Column('scheduled_date', sa.Date(), nullable=False),
    sa.Column('scheduled_time', sa.String(length=5), nullable=False),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('location_type', sa.String(length=20), nullable=False),
    sa.Column('meeting_link', sa.String(length=500), nullable=True),
    sa.Column('office_address', sa.Text(), nullable=True),
    sa.Column('chief_complaint', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('preparation_instructions', sa.Text(), nullable=True),
    sa.Column('consultation_fee', sa.Float(), nullable=True),
    sa.Column('payment_status', sa.String(length=20), nullable=True),
    sa.Column('is_follow_up', sa.Boolean(), nullable=True),
    sa.Column('original_appointment_id', sa.Integer(), nullable=True),
    sa.Column('requested_at', sa.DateTime(), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], ),
    sa.ForeignKeyConstraint(['original_appointment_id'], ['appointments.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_appointments_doctor_id'), 'appointments', ['doctor_id'], unique=False)
    op.create_index(op.f('ix_appointments_id'), 'appointments', ['id'], unique=False)
    op.create_index(op.f('ix_appointments_patient_id'), 'appointments', ['patient_id'], unique=False)
    op.create_index(op.f('ix_appointments_scheduled_date'), 'appointments', ['scheduled_date'], unique=False)
    op.create_table('doctor_availability',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=False),
    sa.Column('day_of_week', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.String(length=5), nullable=False),
    sa.Column('end_time', sa.String(length=5), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('max_appointments', sa.Integer(), nullable=True),
    sa.Column('appointment_duration', sa.Integer(), nullable=True),
    sa.Column('effective_from', sa.Date(), nullable=True),
    sa.Column('effective_until', sa.Date(), nullable=True),
    sa.Column('appointment_types_accepted', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=20), nullable=False),
    sa.Column('office_address', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_doctor_availability_doctor_id'), 'doctor_availability', ['doctor_id'], unique=False)
    op.create_index(op.f('ix_doctor_availability_id'), 'doctor_availability', ['id'], unique=False)
    op.create_table('document_chunks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('chunk_type', sa.String(length=50), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_length', sa.Integer(), nullable=False),
    sa.Column('page_number', sa.Integer(), nullable=True),
    sa.Column('section_title', sa.String(length=500), nullable=True),
    sa.Column('start_position', sa.Integer(), nullable=True),
    sa.Column('end_position', sa.Integer(), nullable=True),
    sa.Column('preceding_context', sa.Text(), nullable=True),
    sa.Column('following_context', sa.Text(), nullable=True),
    sa.Column('medical_entities', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('diseases_mentioned', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('symptoms_mentioned', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('medications_mentioned', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('embedding_model', sa.String(length=200), nullable=True),
    sa.Column('embedding_created_at', sa.DateTime(), nullable=True),
    sa.Column('relevance_score', sa.Float(), nullable=True),
    sa.Column('clarity_score', sa.Float(), nullable=True),
    sa.Column('information_density', sa.Float(), nullable=True),
    sa.Column('retrieval_count', sa.Integer(), nullable=False),
    sa.Column('last_retrieved', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('chunk_index >= 0', name='non_negative_chunk_index'),
    sa.CheckConstraint('content_length > 0', name='positive_content_length'),
    sa.CheckConstraint('retrieval_count >= 0', name='non_negative_retrieval_count'),
    sa.ForeignKeyConstraint(['document_id'], ['medical_documents.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('document_id', 'chunk_index', name='uq_document_chunk_index')
    )
    op.create_index('idx_document_chunk_diseases', 'document_chunks', ['diseases_mentioned'], unique=False)
    op.create_index('idx_document_chunk_document', 'document_chunks', ['document_id'], unique=False)
    op.create_index('idx_document_chunk_index', 'document_chunks', ['chunk_index'], unique=False)
    op.create_index('idx_document_chunk_symptoms', 'document_chunks', ['symptoms_mentioned'], unique=False)
    op.create_index(op.f('ix_document_chunks_id'), 'document_chunks', ['id'], unique=False)
    op.create_table('medical_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=True),
    sa.Column('visit_date', sa.DateTime(), nullable=False),
    sa.Column('chief_complaint', sa.Text(), nullable=True),
    sa.Column('diagnosis', sa.Text(), nullable=False),
    sa.Column('treatment_plan', sa.Text(), nullable=True),
    sa.Column('symptoms', sa.Text(), nullable=True),
    sa.Column('vital_signs', sa.Text(), nullable=True),
    sa.Column('lab_results', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('follow_up_required', sa.Boolean(), nullable=True),
    sa.Column('follow_up_date', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_medical_history_doctor_id'), 'medical_history', ['doctor_id'], unique=False)
    op.create_index(op.f('ix_medical_history_id'), 'medical_history', ['id'], unique=False)
    op.create_index(op.f('ix_medical_history_patient_id'), 'medical_history', ['patient_id'], unique=False)
    op.create_table('medications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('prescribed_by', sa.Integer(), nullable=True),
    sa.Column('medication_name', sa.String(length=200), nullable=False),
    sa.Column('generic_name', sa.String(length=200), nullable=True),
    sa.Column('dosage', sa.String(length=100), nullable=False),
    sa.Column('frequency', sa.String(length=100), nullable=False),
    sa.Column('route', sa.String(length=50), nullable=True),
    sa.Column('indication', sa.Text(), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('side_effects', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['prescribed_by'], ['doctors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_medications_id'), 'medications', ['id'], unique=False)
    op.create_index(op.f('ix_medications_patient_id'), 'medications', ['patient_id'], unique=False)
    op.create_index(op.f('ix_medications_prescribed_by'), 'medications', ['prescribed_by'], unique=False)
    op.create_table('patient_symptoms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('symptom_id', sa.Integer(), nullable=False),
    sa.Column('severity', sa.Enum('MILD', 'MODERATE', 'SEVERE', 'CRITICAL', name='severitylevel'), nullable=False),
    sa.Column('duration_days', sa.Integer(), nullable=True),
    sa.Column('frequency', sa.String(length=50), nullable=True),
    sa.Column('patient_description', sa.Text(), nullable=True),
    sa.Column('triggers', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('alleviating_factors', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('onset_date', sa.DateTime(), nullable=True),
    sa.Column('first_noticed', sa.DateTime(), nullable=True),
    sa.Column('is_worsening', sa.Boolean(), nullable=True),
    sa.Column('affects_daily_activities', sa.Boolean(), nullable=False),
    sa.Column('related_conditions', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('current_treatments', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('mentioned_in_rag_consultation', sa.Boolean(), nullable=False),
    sa.Column('rag_relevance_score', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('resolved_date', sa.DateTime(), nullable=True),
    sa.Column('follow_up_needed', sa.Boolean(), nullable=False),
    sa.Column('reported_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('reported_via', sa.String(length=50), nullable=False),
    sa.CheckConstraint("reported_via IN ('web_form', 'rag_chat', 'appointment', 'phone', 'mobile_app')", name='valid_reported_via'),
    sa.CheckConstraint('duration_days IS NULL OR duration_days >= 0', name='non_negative_duration'),
    sa.CheckConstraint('rag_relevance_score IS NULL OR (rag_relevance_score >= 0 AND rag_relevance_score <= 1)', name='valid_rag_relevance_score'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['symptom_id'], ['symptoms.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('patient_id', 'symptom_id', 'reported_at', name='uq_patient_symptom_report')
    )
    op.create_index('idx_patient_symptom_active', 'patient_symptoms', ['is_active'], unique=False)
    op.create_index('idx_patient_symptom_onset', 'patient_symptoms', ['onset_date'], unique=False)
    op.create_index('idx_patient_symptom_patient', 'patient_symptoms', ['patient_id'], unique=False)
    op.create_index('idx_patient_symptom_severity', 'patient_symptoms', ['severity'], unique=False)
    op.create_index('idx_patient_symptom_symptom', 'patient_symptoms', ['symptom_id'], unique=False)
    op.create_index(op.f('ix_patient_symptoms_id'), 'patient_symptoms', ['id'], unique=False)
    op.create_table('rag_consultations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=False),
    sa.Column('consultation_type', sa.String(length=50), nullable=False),
    sa.Column('chief_complaint', sa.Text(), nullable=False),
    sa.Column('detailed_symptoms', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('patient_history_summary', sa.Text(), nullable=True),
    sa.Column('additional_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('embedding_model_used', sa.String(length=200), nullable=True),
    sa.Column('retrieval_query', sa.Text(), nullable=True),
    sa.Column('top_k_retrieved', sa.Integer(), nullable=False),
    sa.Column('retrieval_time_ms', sa.Float(), nullable=True),
    sa.Column('llm_model_used', sa.String(length=100), nullable=True),
    sa.Column('generation_time_ms', sa.Float(), nullable=True),
    sa.Column('total_processing_time_ms', sa.Float(), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('preliminary_diagnosis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('recommendations', sa.Text(), nullable=True),
    sa.Column('urgency_assessment', sa.String(length=20), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('disclaimer_shown', sa.Boolean(), nullable=False),
    sa.Column('emergency_warning_triggered', sa.Boolean(), nullable=False),
    sa.Column('referral_recommended', sa.Boolean(), nullable=False),
    sa.Column('user_satisfaction_rating', sa.Integer(), nullable=True),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('accuracy_validated_by_doctor', sa.Boolean(), nullable=True),
    sa.Column('doctor_feedback', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('INITIATED', 'PROCESSING', 'COMPLETED', 'REVIEWED', 'ERROR', name='ragconsultationstatus'), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('gpu_used', sa.Boolean(), nullable=False),
    sa.Column('gpu_device', sa.String(length=50), nullable=True),
    sa.Column('memory_used_mb', sa.Float(), nullable=True),
    sa.Column('converted_to_appointment', sa.Boolean(), nullable=False),
    sa.Column('appointment_id', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.CheckConstraint("consultation_type IN ('symptom_analysis', 'medication_inquiry', 'general_question', 'follow_up')", name='valid_consultation_type'),
    sa.CheckConstraint("urgency_assessment IS NULL OR urgency_assessment IN ('low', 'medium', 'high', 'emergency')", name='valid_urgency'),
    sa.CheckConstraint('confidence_score IS NULL OR (confidence_score >= 0 AND confidence_score <= 1)', name='valid_confidence_score'),
    sa.CheckConstraint('retry_count >= 0', name='non_negative_retry_count'),
    sa.CheckConstraint('top_k_retrieved > 0', name='positive_top_k'),
    sa.CheckConstraint('user_satisfaction_rating IS NULL OR (user_satisfaction_rating >= 1 AND user_satisfaction_rating <= 5)', name='valid_satisfaction_rating'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_rag_consultation_converted', 'rag_consultations', ['converted_to_appointment'], unique=False)
    op.create_index('idx_rag_consultation_patient', 'rag_consultations', ['patient_id'], unique=False)
    op.create_index('idx_rag_consultation_started', 'rag_consultations', ['started_at'], unique=False)
    op.create_index('idx_rag_consultation_status', 'rag_consultations', ['status'], unique=False)
    op.create_index('idx_rag_consultation_urgency', 'rag_consultations', ['urgency_assessment'], unique=False)
    op.create_index('idx_rag_consultation_user', 'rag_consultations', ['user_id'], unique=False)
    op.create_index(op.f('ix_rag_consultations_id'), 'rag_consultations', ['id'], unique=False)
    op.create_index(op.f('ix_rag_consultations_session_id'), 'rag_consultations', ['session_id'], unique=True)
    op.create_table('consultation_sources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('consultation_id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('chunk_id', sa.Integer(), nullable=False),
    sa.Column('similarity_score', sa.Float(), nullable=False),
    sa.Column('rank_position', sa.Integer(), nullable=False),
    sa.Column('retrieval_method', sa.String(length=50), nullable=False),
    sa.Column('used_in_generation', sa.Boolean(), nullable=False),
    sa.Column('influence_weight', sa.Float(), nullable=True),
    sa.Column('quoted_in_response', sa.Boolean(), nullable=False),
    sa.Column('query_that_retrieved', sa.Text(), nullable=True),
    sa.Column('retrieval_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('relevance_score', sa.Float(), nullable=True),
    sa.Column('accuracy_score', sa.Float(), nullable=True),
    sa.Column('user_clicked', sa.Boolean(), nullable=False),
    sa.Column('retrieved_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("retrieval_method IN ('semantic_search', 'keyword_search', 'hybrid', 'reranking')", name='valid_retrieval_method'),
    sa.CheckConstraint('accuracy_score IS NULL OR (accuracy_score >= 0 AND accuracy_score <= 1)', name='valid_accuracy_score'),
    sa.CheckConstraint('influence_weight IS NULL OR (influence_weight >= 0 AND influence_weight <= 1)', name='valid_influence_weight'),
    sa.CheckConstraint('rank_position > 0', name='positive_rank_position'),
    sa.CheckConstraint('relevance_score IS NULL OR (relevance_score >= 0 AND relevance_score <= 1)', name='valid_relevance_score'),
    sa.CheckConstraint('similarity_score >= 0 AND similarity_score <= 1', name='valid_similarity_score'),
    sa.ForeignKeyConstraint(['chunk_id'], ['document_chunks.id'], ),
    sa.ForeignKeyConstraint(['consultation_id'], ['rag_consultations.id'], ),
    sa.ForeignKeyConstraint(['document_id'], ['medical_documents.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('consultation_id', 'chunk_id', name='uq_consultation_chunk')
    )
    op.create_index('idx_consultation_source_chunk', 'consultation_sources', ['chunk_id'], unique=False)
    op.create_index('idx_consultation_source_consultation', 'consultation_sources', ['consultation_id'], unique=False)
    op.create_index('idx_consultation_source_document', 'consultation_sources', ['document_id'], unique=False)
    op.create_index('idx_consultation_source_rank', 'consultation_sources', ['rank_position'], unique=False)
    op.create_index('idx_consultation_source_similarity', 'consultation_sources', ['similarity_score'], unique=False)
    op.create_index('idx_consultation_source_used', 'consultation_sources', ['used_in_generation'], unique=False)
    op.create_index(op.f('ix_consultation_sources_id'), 'consultation_sources', ['id'], unique=False)
    op.create_table('embeddings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('chunk_id', sa.Integer(), nullable=False),
    sa.Column('model_name', sa.String(length=200), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=True),
    sa.Column('embedding_dimension', sa.Integer(), nullable=False),
    sa.Column('vector_data', sa.LargeBinary(), nullable=False),
    sa.Column('generated_with_gpu', sa.Boolean(), nullable=False),
    sa.Column('gpu_device_used', sa.String(length=50), nullable=True),
    sa.Column('generation_time_ms', sa.Float(), nullable=True),
    sa.Column('batch_size_used', sa.Integer(), nullable=True),
    sa.Column('precision_used', sa.String(length=10), nullable=True),
    sa.Column('similarity_search_count', sa.Integer(), nullable=False),
    sa.Column('avg_similarity_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('embedding_dimension > 0', name='positive_embedding_dimension'),
    sa.CheckConstraint('similarity_search_count >= 0', name='non_negative_search_count'),
    sa.ForeignKeyConstraint(['chunk_id'], ['document_chunks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('chunk_id')
    )
    op.create_index('idx_embedding_dimension', 'embeddings', ['embedding_dimension'], unique=False)
    op.create_index('idx_embedding_gpu', 'embeddings', ['generated_with_gpu'], unique=False)
    op.create_index('idx_embedding_model', 'embeddings', ['model_name'], unique=False)
    op.create_index(op.f('ix_embeddings_id'), 'embeddings', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_embeddings_id'), table_name='embeddings')
    op.drop_index('idx_embedding_model', table_name='embeddings')
    op.drop_index('idx_embedding_gpu', table_name='embeddings')
    op.drop_index('idx_embedding_dimension', table_name='embeddings')
    op.drop_table('embeddings')
    op.drop_index(op.f('ix_consultation_sources_id'), table_name='consultation_sources')
    op.drop_index('idx_consultation_source_used', table_name='consultation_sources')
    op.drop_index('idx_consultation_source_similarity', table_name='consultation_sources')
    op.drop_index('idx_consultation_source_rank', table_name='consultation_sources')
    op.drop_index('idx_consultation_source_document', table_name='consultation_sources')
    op.drop_index('idx_consultation_source_consultation', table_name='consultation_sources')
    op.drop_index('idx_consultation_source_chunk', table_name='consultation_sources')
    op.drop_table('consultation_sources')
    op.drop_index(op.f('ix_rag_consultations_session_id'), table_name='rag_consultations')
    op.drop_index(op.f('ix_rag_consultations_id'), table_name='rag_consultations')
    op.drop_index('idx_rag_consultation_user', table_name='rag_consultations')
    op.drop_index('idx_rag_consultation_urgency', table_name='rag_consultations')
    op.drop_index('idx_rag_consultation_status', table_name='rag_consultations')
    op.drop_index('idx_rag_consultation_started', table_name='rag_consultations')
    op.drop_index('idx_rag_consultation_patient', table_name='rag_consultations')
    op.drop_index('idx_rag_consultation_converted', table_name='rag_consultations')
    op.drop_table('rag_consultations')
    op.drop_index(op.f('ix_patient_symptoms_id'), table_name='patient_symptoms')
    op.drop_index('idx_patient_symptom_symptom', table_name='patient_symptoms')
    op.drop_index('idx_patient_symptom_severity', table_name='patient_symptoms')
    op.drop_index('idx_patient_symptom_patient', table_name='patient_symptoms')
    op.drop_index('idx_patient_symptom_onset', table_name='patient_symptoms')
    op.drop_index('idx_patient_symptom_active', table_name='patient_symptoms')
    op.drop_table('patient_symptoms')
    op.drop_index(op.f('ix_medications_prescribed_by'), table_name='medications')
    op.drop_index(op.f('ix_medications_patient_id'), table_name='medications')
    op.drop_index(op.f('ix_medications_id'), table_name='medications')
    op.drop_table('medications')
    op.drop_index(op.f('ix_medical_history_patient_id'), table_name='medical_history')
    op.drop_index(op.f('ix_medical_history_id'), table_name='medical_history')
    op.drop_index(op.f('ix_medical_history_doctor_id'), table_name='medical_history')
    op.drop_table('medical_history')
    op.drop_index(op.f('ix_document_chunks_id'), table_name='document_chunks')
    op.drop_index('idx_document_chunk_symptoms', table_name='document_chunks')
    op.drop_index('idx_document_chunk_index', table_name='document_chunks')
    op.drop_index('idx_document_chunk_document', table_name='document_chunks')
    op.drop_index('idx_document_chunk_diseases', table_name='document_chunks')
    op.drop_table('document_chunks')
    op.drop_index(op.f('ix_doctor_availability_id'), table_name='doctor_availability')
    op.drop_index(op.f('ix_doctor_availability_doctor_id'), table_name='doctor_availability')
    op.drop_table('doctor_availability')
    op.drop_index(op.f('ix_appointments_scheduled_date'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_patient_id'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_id'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_doctor_id'), table_name='appointments')
    op.drop_table('appointments')
    op.drop_index(op.f('ix_allergies_patient_id'), table_name='allergies')
    op.drop_index(op.f('ix_allergies_id'), table_name='allergies')
    op.drop_table('allergies')
    op.drop_index(op.f('ix_user_profiles_id'), table_name='user_profiles')
    op.drop_table('user_profiles')
    op.drop_index(op.f('ix_symptoms_id'), table_name='symptoms')
    op.drop_index('idx_symptom_urgency', table_name='symptoms')
    op.drop_index('idx_symptom_specialty', table_name='symptoms')
    op.drop_index('idx_symptom_name', table_name='symptoms')
    op.drop_index('idx_symptom_category', table_name='symptoms')
    op.drop_table('symptoms')
    op.drop_index(op.f('ix_patients_id'), table_name='patients')
    op.drop_table('patients')
    op.drop_index(op.f('ix_medical_documents_id'), table_name='medical_documents')
    op.drop_index(op.f('ix_medical_documents_file_hash'), table_name='medical_documents')
    op.drop_index('idx_medical_document_type', table_name='medical_documents')
    op.drop_index('idx_medical_document_status', table_name='medical_documents')
    op.drop_index('idx_medical_document_specialty', table_name='medical_documents')
    op.drop_index('idx_medical_document_diseases', table_name='medical_documents')
    op.drop_table('medical_documents')
    op.drop_index(op.f('ix_doctors_medical_license_number'), table_name='doctors')
    op.drop_index(op.f('ix_doctors_id'), table_name='doctors')
    op.drop_table('doctors')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_system_metrics_id'), table_name='system_metrics')
    op.drop_index('idx_system_metrics_recorded', table_name='system_metrics')
    op.drop_table('system_metrics')
    op.drop_index(op.f('ix_model_metrics_id'), table_name='model_metrics')
    op.drop_index('idx_model_metrics_type', table_name='model_metrics')
    op.drop_index('idx_model_metrics_period', table_name='model_metrics')
    op.drop_index('idx_model_metrics_name_version', table_name='model_metrics')
    op.drop_table('model_metrics')
    # ### end Alembic commands ###
